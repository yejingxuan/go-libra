// Code generated by protoc-gen-go. DO NOT EDIT.
// source: search.proto

package server

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// HelloRequest 请求结构
type FTRSearchReq struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FTRSearchReq) Reset()         { *m = FTRSearchReq{} }
func (m *FTRSearchReq) String() string { return proto.CompactTextString(m) }
func (*FTRSearchReq) ProtoMessage()    {}
func (*FTRSearchReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{0}
}

func (m *FTRSearchReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FTRSearchReq.Unmarshal(m, b)
}
func (m *FTRSearchReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FTRSearchReq.Marshal(b, m, deterministic)
}
func (m *FTRSearchReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FTRSearchReq.Merge(m, src)
}
func (m *FTRSearchReq) XXX_Size() int {
	return xxx_messageInfo_FTRSearchReq.Size(m)
}
func (m *FTRSearchReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FTRSearchReq.DiscardUnknown(m)
}

var xxx_messageInfo_FTRSearchReq proto.InternalMessageInfo

func (m *FTRSearchReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

// HelloResponse 响应结构
type FTRSearchRep struct {
	Result               string   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FTRSearchRep) Reset()         { *m = FTRSearchRep{} }
func (m *FTRSearchRep) String() string { return proto.CompactTextString(m) }
func (*FTRSearchRep) ProtoMessage()    {}
func (*FTRSearchRep) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{1}
}

func (m *FTRSearchRep) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FTRSearchRep.Unmarshal(m, b)
}
func (m *FTRSearchRep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FTRSearchRep.Marshal(b, m, deterministic)
}
func (m *FTRSearchRep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FTRSearchRep.Merge(m, src)
}
func (m *FTRSearchRep) XXX_Size() int {
	return xxx_messageInfo_FTRSearchRep.Size(m)
}
func (m *FTRSearchRep) XXX_DiscardUnknown() {
	xxx_messageInfo_FTRSearchRep.DiscardUnknown(m)
}

var xxx_messageInfo_FTRSearchRep proto.InternalMessageInfo

func (m *FTRSearchRep) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func init() {
	proto.RegisterType((*FTRSearchReq)(nil), "server.FTRSearchReq")
	proto.RegisterType((*FTRSearchRep)(nil), "server.FTRSearchRep")
}

func init() { proto.RegisterFile("search.proto", fileDescriptor_453745cff914010e) }

var fileDescriptor_453745cff914010e = []byte{
	// 131 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x4e, 0x4d, 0x2c,
	0x4a, 0xce, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2b, 0x4e, 0x2d, 0x2a, 0x4b, 0x2d,
	0x52, 0x52, 0xe0, 0xe2, 0x71, 0x0b, 0x09, 0x0a, 0x06, 0x4b, 0x05, 0xa5, 0x16, 0x0a, 0x09, 0x70,
	0x31, 0x67, 0xa7, 0x56, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81, 0x98, 0x4a, 0x6a, 0x28,
	0x2a, 0x0a, 0x84, 0xc4, 0xb8, 0xd8, 0x8a, 0x52, 0x8b, 0x4b, 0x73, 0x4a, 0xa0, 0x8a, 0xa0, 0x3c,
	0x23, 0x67, 0x2e, 0x36, 0x88, 0x22, 0x21, 0x4b, 0x2e, 0x4e, 0xb8, 0x0e, 0x21, 0x11, 0x3d, 0x88,
	0x4d, 0x7a, 0xc8, 0xd6, 0x48, 0x61, 0x13, 0x2d, 0x50, 0x62, 0x70, 0xe2, 0x88, 0x82, 0x3a, 0x2c,
	0x89, 0x0d, 0xec, 0x4e, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xdb, 0x3d, 0x2d, 0xf4, 0xb7,
	0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SearchClient is the client API for Search service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SearchClient interface {
	// 全文检索
	FTRSearch(ctx context.Context, in *FTRSearchReq, opts ...grpc.CallOption) (*FTRSearchRep, error)
}

type searchClient struct {
	cc *grpc.ClientConn
}

func NewSearchClient(cc *grpc.ClientConn) SearchClient {
	return &searchClient{cc}
}

func (c *searchClient) FTRSearch(ctx context.Context, in *FTRSearchReq, opts ...grpc.CallOption) (*FTRSearchRep, error) {
	out := new(FTRSearchRep)
	err := c.cc.Invoke(ctx, "/server.Search/FTRSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SearchServer is the server API for Search service.
type SearchServer interface {
	// 全文检索
	FTRSearch(context.Context, *FTRSearchReq) (*FTRSearchRep, error)
}

// UnimplementedSearchServer can be embedded to have forward compatible implementations.
type UnimplementedSearchServer struct {
}

func (*UnimplementedSearchServer) FTRSearch(ctx context.Context, req *FTRSearchReq) (*FTRSearchRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FTRSearch not implemented")
}

func RegisterSearchServer(s *grpc.Server, srv SearchServer) {
	s.RegisterService(&_Search_serviceDesc, srv)
}

func _Search_FTRSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FTRSearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).FTRSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Search/FTRSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).FTRSearch(ctx, req.(*FTRSearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Search_serviceDesc = grpc.ServiceDesc{
	ServiceName: "server.Search",
	HandlerType: (*SearchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FTRSearch",
			Handler:    _Search_FTRSearch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "search.proto",
}
